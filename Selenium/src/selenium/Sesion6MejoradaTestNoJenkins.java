package selenium;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class Sesion6MejoradaTestNoJenkins {
	private WebDriver driver;
	//private Map<String, Object> vars;
	JavascriptExecutor js;
	String tareaRandom;
	int count;

	@Before
	public void setUp() {
		//System.setProperty("webdriver.gecko.driver", "drivers/geckodriver.exe");
		//System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");

		// Browser selector
		int browser = 0; // 0: firefox, 1: chrome,...
		Boolean headless = true;

		switch (browser) {
		case 0: // firefox
			// Firefox
			// Descargar geckodriver de https://github.com/mozilla/geckodriver/releases
			// Descomprimir el archivo geckodriver.exe en la carpeta drivers

			System.setProperty("webdriver.gecko.driver", "drivers/geckodriver.exe");
			
			FirefoxOptions firefoxOptions = new FirefoxOptions();
			if (headless)
				firefoxOptions.setHeadless(headless);
			driver = new FirefoxDriver(firefoxOptions);

			break;
		case 1: // chrome
			// Chrome
			// Descargar Chromedriver de https://chromedriver.chromium.org/downloads
			// Descomprimir el archivo chromedriver.exe en la carpeta drivers

			System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
			
			ChromeOptions chromeOptions = new ChromeOptions();
			if (headless)
				chromeOptions.setHeadless(headless);
			chromeOptions.addArguments("window-size=1920,1080");
			driver = new ChromeDriver(chromeOptions);

			break;

		default:
			fail("Please select a browser");
			break;
		}

		js = (JavascriptExecutor) driver;
		// vars = new HashMap<String, Object>();
		// Creamos un nombre de tarea aleatorio y lo guardamos en TareaRandom
		tareaRandom = "Tarea-" + (int) Math.floor(Math.random() * 1500000);
	}

	@After
	public void tearDown() {
		// driver.close();
		driver.quit();
	}

	@Test
	public void sesion6Mejorada() {
		// Test name: Sesion6Mejorada
		// Step # | name | target | value
		// 1 | executeScript | return "Tarea-" + Math.floor(Math.random()*1500000) |
		// Creamos un nombre de tarea aleatorio y lo guardamos en TareaRandom
		//vars.put("TareaRandom", js.executeScript("return \"Tarea-\" + Math.floor(Math.random()*1500000)"));
		// 2 | open | https://msdocs-node-mongo-2022-group11.azurewebsites.net/ |
		driver.get("https://msdocs-node-mongo-2022-group11.azurewebsites.net/");
		// 3 | echo | ${TareaRandom} |
		// System.out.println(vars.get("TareaRandom").toString());
		System.out.println("La tarea a probar es: " + tareaRandom);
		// 4 | click | name=taskName |
		driver.findElement(By.name("taskName")).click();
		// 5 | type | name=taskName | ${TareaRandom}
		//driver.findElement(By.name("taskName")).sendKeys(vars.get("TareaRandom").toString());
		driver.findElement(By.name("taskName")).sendKeys(tareaRandom);
		// 6 | click | css=.btn-success |
		driver.findElement(By.cssSelector(".btn-success")).click();
		// 7 | assertText | xpath=//div[@class='row
		// mb-2'][last()]//div[@class='col-sm-6'] | ${TareaRandom}
		assertThat(
				//driver.findElement(By.xpath("//div[@class=\'row mb-2\'][last()]//div[@class=\'col-sm-6\']")).getText(),
				//is("vars.get(\"TareaRandom\").toString()"));
				driver.findElement(By.xpath("//div[@class=\'row mb-2\'][last()]//div[@class=\'col-sm-6\']")).getText(),
				is(tareaRandom));
		// 8 | storeXpathCount | xpath=//main/div[@class='row mb-2'] | count
		//vars.put("count", driver.findElements(By.xpath("//main/div[@class=\'row mb-2\']")).size());
		count = driver.findElements(By.xpath("//main/div[@class=\'row mb-2\']")).size();
		// 9 | echo | ${count} |
		//System.out.println(vars.get("count").toString());
		System.out.println("Cantidad de elementos: " + count
				+ "\nSi es igual a 1, se comprobara que el elemento no existe\nSi es diferente, se comprobara que en los elementos, no se encuentra la tarea");
		// 10 | click | xpath=//div[@class='row mb-2'][last()]/div[4]/form/button |
		driver.findElement(By.xpath("//div[@class=\'row mb-2\'][last()]/div[4]/form/button")).click();
		// 11 | if | ${count}==1 |
		if ((Boolean) js.executeScript("return (arguments[0]==1)", count)) {
		//if ((Boolean) js.executeScript("return (arguments[0]==1)", vars.get("count"))) {
			// 12 | verifyElementNotPresent | xpath=//main/div[@class='row mb-2']/div |
			// presente
			{
				List<WebElement> elements = driver.findElements(By.xpath("//main/div[@class=\'row mb-2\']/div"));
				assert (elements.size() == 0);
			}
			// 13 | else | |
		} else {
			// 14 | assertNotText | xpath=//div[@class='row
			// mb-2'][last()]//div[@class='col-sm-6'] | ${TareaRandom}
			//assertThat(driver.findElement(By.xpath("//div[@class=\'row mb-2\'][last()]//div[@class=\'col-sm-6\']"))
					//.getText(), is(not("vars.get(\"TareaRandom\").toString()")));
			assertThat(driver.findElement(By.xpath("//div[@class=\'row mb-2\'][last()]//div[@class=\'col-sm-6\']")).getText(),
					is(not(tareaRandom)));
			// 15 | end | |
		}
		// 16 | click | name=taskName |
		driver.findElement(By.name("taskName")).click();
		// 17 | type | name=taskName | ${TareaRandom}
		//driver.findElement(By.name("taskName")).sendKeys("vars.get(\"TareaRandom\").toString()");
		driver.findElement(By.name("taskName")).sendKeys(tareaRandom);
		// 18 | click | css=.btn-success |
		driver.findElement(By.cssSelector(".btn-success")).click();
		// 19 | click | xpath=//div[@class='row mb-2'][last()]/div[3]/form/button |
		driver.findElement(By.xpath("//div[@class=\'row mb-2\'][last()]/div[3]/form/button")).click();
		// 20 | assertText | xpath=//div[@class='row mb-3'][last()]/div | ${TareaRandom}
		 //assertThat(driver.findElement(By.xpath("//div[@class=\'row mb-3\'][last()]/div")).getText(),
		 //is("vars.get(\"TareaRandom\").toString()"));
		System.out.println(tareaRandom);
		assertThat(driver.findElement(By.xpath("//div[@class=\'row mb-3\'][last()]/div")).getText(), is(tareaRandom));
		// 21 | close | |
		// driver.close();
	}
}
